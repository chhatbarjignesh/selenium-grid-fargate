{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "ContainerCpu": {
            "Type": "Number",
            "Default": 256,
            "Description": "How much CPU to give the container. 1024 is 1 CPU"
        },
        "ContainerMemory": {
            "Type": "Number",
            "Default": 512,
            "Description": "How much memory in megabytes to give the container"
        },
        "SeleniumImageVersion": {
            "Type": "String",
            "Default": "3.141.59",
            "Description": "Version of the Selenium docker images - hub, node-chrome and node-firefox - to be used."
        },
        "Path": {
            "Type": "String",
            "Default": "*",
            "Description": "A path on the public load balancer that this service should be connected to. Use * to send all load balancer traffic to this service."
        },
        "Priority": {
            "Type": "Number",
            "Default": 1,
            "Description": "The priority for the routing rule added to the load balancer. This only applies if your have multiple services which have been assigned to different paths on the load balancer."
        },
        "Role": {
            "Type": "String",
            "Default": "",
            "Description": "(Optional) An IAM role to give the service's containers if the code within needs to access other AWS resources like S3 buckets, DynamoDB tables, etc"
        }
    },
    "Conditions": {
        "HasCustomRole": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "Role"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Mappings": {
        "SubnetConfig": {
            "VPC": {
                "CIDR": "10.0.0.0/16"
            },
            "PublicOne": {
                "CIDR": "10.0.0.0/24"
            },
            "PublicTwo": {
                "CIDR": "10.0.1.0/24"
            },
            "PrivateOne": {
                "CIDR": "10.0.2.0/24"
            },
            "PrivateTwo": {
                "CIDR": "10.0.3.0/24"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "VPC",
                        "CIDR"
                    ]
                }
            }
        },
        "PublicSubnetOne": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "PublicOne",
                        "CIDR"
                    ]
                },
                "MapPublicIpOnLaunch": true
            }
        },
        "PublicSubnetTwo": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "PublicTwo",
                        "CIDR"
                    ]
                },
                "MapPublicIpOnLaunch": true
            }
        },
        "PrivateSubnetOne": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "PrivateOne",
                        "CIDR"
                    ]
                }
            }
        },
        "PrivateSubnetTwo": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "PrivateTwo",
                        "CIDR"
                    ]
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "GatewayAttachement": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayAttachement",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnetOneRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetOne"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSubnetTwoRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetTwo"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "NatGatewayOneAttachment": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "GatewayAttachement",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NatGatewayTwoAttachment": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "GatewayAttachement",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NatGatewayOne": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatGatewayOneAttachment",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnetOne"
                }
            }
        },
        "NatGatewayTwo": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatGatewayTwoAttachment",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnetTwo"
                }
            }
        },
        "PrivateRouteTableOne": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateRouteOne": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTableOne"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGatewayOne"
                }
            }
        },
        "PrivateRouteTableOneAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTableOne"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnetOne"
                }
            }
        },
        "PrivateRouteTableTwo": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateRouteTwo": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTableTwo"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGatewayTwo"
                }
            }
        },
        "PrivateRouteTableTwoAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTableTwo"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnetTwo"
                }
            }
        },
        "SeleniumGrid": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterName": "selenium-grid"
            }
        },
        "SeleniumGridContainerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Access to the Fargate containers",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "EcsSecurityGroupIngressFromPublicALB": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "Ingress from the public ALB",
                "GroupId": {
                    "Ref": "SeleniumGridContainerSecurityGroup"
                },
                "IpProtocol": -1,
                "SourceSecurityGroupId": {
                    "Ref": "SeleniumLoadBalancerSG"
                }
            }
        },
        "EcsSecurityGroupIngressFromSelf": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "Ingress from other containers in the same security group",
                "GroupId": {
                    "Ref": "SeleniumGridContainerSecurityGroup"
                },
                "IpProtocol": -1,
                "SourceSecurityGroupId": {
                    "Ref": "SeleniumGridContainerSecurityGroup"
                }
            }
        },
        "SeleniumLoadBalancerSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Access to the public facing load balancer",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "IpProtocol": -1
                    }
                ]
            }
        },
        "SeleniumLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "LoadBalancerAttributes": [
                    {
                        "Key": "idle_timeout.timeout_seconds",
                        "Value": "100"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "PublicSubnetOne"
                    },
                    {
                        "Ref": "PublicSubnetTwo"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "SeleniumLoadBalancerSG"
                    }
                ]
            }
        },
        "DummyTargetGroupPublic": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 6,
                "HealthCheckPath": "/",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "drop-1"
                        ]
                    ]
                },
                "Port": 4444,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 2,
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "SeleniumLoadBalancerListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "DependsOn": "SeleniumLoadBalancer",
            "Properties": {
                "DefaultActions": [
                    {
                        "TargetGroupArn": {
                            "Ref": "DummyTargetGroupPublic"
                        },
                        "Type": "forward"
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "SeleniumLoadBalancer"
                },
                "Port": 4444,
                "Protocol": "HTTP"
            }
        },
        "ECSRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ecs.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ecs-service",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:AttachNetworkInterface",
                                        "ec2:CreateNetworkInterface",
                                        "ec2:CreateNetworkInterfacePermission",
                                        "ec2:DeleteNetworkInterface",
                                        "ec2:DeleteNetworkInterfacePermission",
                                        "ec2:Describe*",
                                        "ec2:DetachNetworkInterface",
                                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                        "elasticloadbalancing:DeregisterTargets",
                                        "elasticloadbalancing:Describe*",
                                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                        "elasticloadbalancing:RegisterTargets"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ECSTaskExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ecs-tasks.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AmazonECSTaskExecutionRolePolicy",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecr:GetAuthorizationToken",
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:BatchGetImage",
                                        "logs:CreateLogStream",
                                        "logs:CreateLogGroup",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "selenium-grid",
                "RetentionInDays": 30
            }
        },
        "TaskDefinitionHub": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Cpu": {
                    "Ref": "ContainerCpu"
                },
                "Memory": {
                    "Ref": "ContainerMemory"
                },
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "FARGATE"
                ],
                "ExecutionRoleArn": {
                    "Fn::GetAtt": [
                        "ECSTaskExecutionRole",
                        "Arn"
                    ]
                },
                "ContainerDefinitions": [
                    {
                        "Name": "selenium-hub",
                        "Cpu": {
                            "Ref": "ContainerCpu"
                        },
                        "Memory": {
                            "Ref": "ContainerMemory"
                        },
                        "Image": {
                            "Fn::Join": [
                                ":",
                                [
                                    "selenium/hub",
                                    {
                                        "Ref": "SeleniumImageVersion"
                                    }
                                ]
                            ]
                        },
                        "Environment": [
                            {
                                "Name": "SE_OPTS",
                                "Value": "-debug"
                            },
                            {
                                "Name": "GRID_TIMEOUT",
                                "Value": "180"
                            },
                            {
                                "Name": "GRID_BROWSER_TIMEOUT",
                                "Value": "200000"
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "LogGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": "selenium-logs"
                            }
                        },
                        "PortMappings": [
                            {
                                "ContainerPort": 4444
                            }
                        ]
                    }
                ]
            }
        },
        "TaskDefinitionNodeChrome": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Cpu": {
                    "Ref": "ContainerCpu"
                },
                "Memory": {
                    "Ref": "ContainerMemory"
                },
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "FARGATE"
                ],
                "ExecutionRoleArn": {
                    "Fn::GetAtt": [
                        "ECSTaskExecutionRole",
                        "Arn"
                    ]
                },
                "ContainerDefinitions": [
                    {
                        "Name": "selenium-node-chrome",
                        "Cpu": {
                            "Ref": "ContainerCpu"
                        },
                        "Memory": {
                            "Ref": "ContainerMemory"
                        },
                        "Image": {
                            "Fn::Join": [
                                ":",
                                [
                                    "selenium/node-chrome",
                                    {
                                        "Ref": "SeleniumImageVersion"
                                    }
                                ]
                            ]
                        },
                        "Environment": [
                            {
                                "Name": "HUB_PORT_4444_TCP_ADDR",
                                "Value": {
                                    "Fn::GetAtt": [
                                        "SeleniumLoadBalancer",
                                        "DNSName"
                                    ]
                                }
                            },
                            {
                                "Name": "HUB_PORT_4444_TCP_PORT",
                                "Value": "4444"
                            },
                            {
                                "Name": "NODE_MAX_INSTANCES",
                                "Value": "5"
                            },
                            {
                                "Name": "NODE_MAX_SESSION",
                                "Value": "5"
                            },
                            {
                                "Name": "shm_size",
                                "Value": 512
                            },
                            {
                                "Name": "SE_OPTS",
                                "Value": "-debug"
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "LogGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": "selenium-logs"
                            }
                        },
                        "EntryPoint": [
                            "sh",
                            "-c"
                        ],
                        "Command": [
                            "PRIVATE=$(curl -s http://169.254.170.2/v2/metadata | jq -r '.Containers[1].Networks[0].IPv4Addresses[0]') ; export REMOTE_HOST=\"http://$PRIVATE:5555\" ; /opt/bin/entry_point.sh"
                        ]
                    }
                ]
            }
        },
        "TaskDefinitionNodeFirefox": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Cpu": {
                    "Ref": "ContainerCpu"
                },
                "Memory": {
                    "Ref": "ContainerMemory"
                },
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "FARGATE"
                ],
                "ExecutionRoleArn": {
                    "Fn::GetAtt": [
                        "ECSTaskExecutionRole",
                        "Arn"
                    ]
                },
                "ContainerDefinitions": [
                    {
                        "Name": "selenium-node-firefox",
                        "Cpu": {
                            "Ref": "ContainerCpu"
                        },
                        "Memory": {
                            "Ref": "ContainerMemory"
                        },
                        "Image": {
                            "Fn::Join": [
                                ":",
                                [
                                    "selenium/node-firefox",
                                    {
                                        "Ref": "SeleniumImageVersion"
                                    }
                                ]
                            ]
                        },
                        "Environment": [
                            {
                                "Name": "HUB_PORT_4444_TCP_ADDR",
                                "Value": {
                                    "Fn::GetAtt": [
                                        "SeleniumLoadBalancer",
                                        "DNSName"
                                    ]
                                }
                            },
                            {
                                "Name": "HUB_PORT_4444_TCP_PORT",
                                "Value": "4444"
                            },
                            {
                                "Name": "NODE_MAX_INSTANCES",
                                "Value": "5"
                            },
                            {
                                "Name": "NODE_MAX_SESSION",
                                "Value": "5"
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "LogGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": "selenium-logs"
                            }
                        },
                        "EntryPoint": [
                            "sh",
                            "-c"
                        ],
                        "Command": [
                            "PRIVATE=$(curl -s http://169.254.170.2/v2/metadata | jq -r '.Containers[1].Networks[0].IPv4Addresses[0]') ; export REMOTE_HOST=\"http://$PRIVATE:5555\" ; /opt/bin/entry_point.sh"
                        ]
                    }
                ]
            }
        },
        "ServiceHub": {
            "Type": "AWS::ECS::Service",
            "DependsOn": "LoadBalancerRule",
            "Properties": {
                "ServiceName": "selenium-hub-service",
                "Cluster": {
                    "Ref": "SeleniumGrid"
                },
                "LaunchType": "FARGATE",
                "DeploymentConfiguration": {
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 75
                },
                "DesiredCount": 1,
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "AssignPublicIp": "ENABLED",
                        "SecurityGroups": [
                            {
                                "Ref": "SeleniumGridContainerSecurityGroup"
                            }
                        ],
                        "Subnets": [
                            {
                                "Ref": "PrivateSubnetOne"
                            },
                            {
                                "Ref": "PrivateSubnetTwo"
                            }
                        ]
                    }
                },
                "TaskDefinition": {
                    "Ref": "TaskDefinitionHub"
                },
                "Role": {
                    "Fn::If": [
                        "HasCustomRole",
                        {
                            "Ref": "Role"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "LoadBalancers": [
                    {
                        "ContainerName": "selenium-hub",
                        "ContainerPort": 4444,
                        "TargetGroupArn": {
                            "Ref": "SeleniumGridTargetGroup"
                        }
                    }
                ]
            }
        },
        "ServiceNodeChrome": {
            "Type": "AWS::ECS::Service",
            "DependsOn": "ServiceHub",
            "Properties": {
                "ServiceName": "node-chrome",
                "Cluster": {
                    "Ref": "SeleniumGrid"
                },
                "LaunchType": "FARGATE",
                "DeploymentConfiguration": {
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 75
                },
                "DesiredCount": 2,
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "AssignPublicIp": "ENABLED",
                        "SecurityGroups": [
                            {
                                "Ref": "SeleniumGridContainerSecurityGroup"
                            }
                        ],
                        "Subnets": [
                            {
                                "Ref": "PrivateSubnetOne"
                            },
                            {
                                "Ref": "PrivateSubnetTwo"
                            }
                        ]
                    }
                },
                "TaskDefinition": {
                    "Ref": "TaskDefinitionNodeChrome"
                }
            }
        },
        "ServiceNodeFirefox": {
            "Type": "AWS::ECS::Service",
            "DependsOn": "ServiceHub",
            "Properties": {
                "ServiceName": "node-firefox",
                "Cluster": {
                    "Ref": "SeleniumGrid"
                },
                "LaunchType": "FARGATE",
                "DeploymentConfiguration": {
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 75
                },
                "DesiredCount": 2,
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "AssignPublicIp": "ENABLED",
                        "SecurityGroups": [
                            {
                                "Ref": "SeleniumGridContainerSecurityGroup"
                            }
                        ],
                        "Subnets": [
                            {
                                "Ref": "PrivateSubnetOne"
                            },
                            {
                                "Ref": "PrivateSubnetTwo"
                            }
                        ]
                    }
                },
                "TaskDefinition": {
                    "Ref": "TaskDefinitionNodeFirefox"
                }
            }
        },
        "SeleniumGridTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 6,
                "HealthCheckPath": "/",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "TargetType": "ip",
                "Name": "selenium-grid",
                "Port": 4444,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 2,
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "LoadBalancerRule": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "DependsOn": "SeleniumLoadBalancerListener",
            "Properties": {
                "Actions": [
                    {
                        "TargetGroupArn": {
                            "Ref": "SeleniumGridTargetGroup"
                        },
                        "Type": "forward"
                    }
                ],
                "Conditions": [
                    {
                        "Field": "path-pattern",
                        "Values": [
                            {
                                "Ref": "Path"
                            }
                        ]
                    }
                ],
                "ListenerArn": {
                    "Ref": "SeleniumLoadBalancerListener"
                },
                "Priority": {
                    "Ref": "Priority"
                }
            }
        },
        "AutoscalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "service-autoscaling",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "application-autoscaling:*",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:PutMetricAlarm",
                                        "ecs:DescribeServices",
                                        "ecs:UpdateService"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "FirefoxScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "DependsOn": "ServiceNodeFirefox",
            "Properties": {
                "ResourceId": {
                    "Fn::Join": [
                        "/",
                        [
                            "service",
                            {
                                "Ref": "SeleniumGrid"
                            },
                            {
                                "Fn::GetAtt": [
                                    "ServiceNodeFirefox",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "ServiceNamespace": "ecs",
                "ScalableDimension": "ecs:service:DesiredCount",
                "RoleARN": {
                    "Fn::GetAtt": [
                        "AutoscalingRole",
                        "Arn"
                    ]
                },
                "MaxCapacity": "4",
                "MinCapacity": "0"
            }
        },
        "FirefoxServiceScaleOutPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "DependsOn": "FirefoxScalableTarget",
            "Properties": {
                "PolicyName": "autoscale_firefox_service",
                "PolicyType": "StepScaling",
                "ScalingTargetId": {
                    "Ref": "FirefoxScalableTarget"
                },
                "StepScalingPolicyConfiguration": {
                    "AdjustmentType": "ChangeInCapacity",
                    "Cooldown": 180,
                    "MetricAggregationType": "Average",
                    "StepAdjustments": [
                        {
                            "ScalingAdjustment": 2,
                            "MetricIntervalLowerBound": 0
                        }
                    ]
                }
            }
        },
        "ChromeScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "DependsOn": "ServiceNodeChrome",
            "Properties": {
                "ResourceId": {
                    "Fn::Join": [
                        "/",
                        [
                            "service",
                            {
                                "Ref": "SeleniumGrid"
                            },
                            {
                                "Fn::GetAtt": [
                                    "ServiceNodeChrome",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "ServiceNamespace": "ecs",
                "ScalableDimension": "ecs:service:DesiredCount",
                "RoleARN": {
                    "Fn::GetAtt": [
                        "AutoscalingRole",
                        "Arn"
                    ]
                },
                "MaxCapacity": "36",
                "MinCapacity": "0"
            }
        },
        "ChromeServiceScaleOutPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "DependsOn": "ChromeScalableTarget",
            "Properties": {
                "PolicyName": "autoscale_chrome_service",
                "PolicyType": "StepScaling",
                "ScalingTargetId": {
                    "Ref": "ChromeScalableTarget"
                },
                "StepScalingPolicyConfiguration": {
                    "AdjustmentType": "ChangeInCapacity",
                    "Cooldown": 180,
                    "MetricAggregationType": "Average",
                    "StepAdjustments": [
                        {
                            "ScalingAdjustment": 1,
                            "MetricIntervalLowerBound": 0
                        }
                    ]
                }
            }
        },
        "NodeServiceCPUScaleOutAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "SELENIUM_FARGATE_NODE_CPU_80PCT_1MIN_DEV",
                "EvaluationPeriods": "1",
                "Statistic": "Maximum",
                "TreatMissingData": "missing",
                "Threshold": "80",
                "AlarmDescription": "Alarm to add capacity if CPU is high",
                "Period": 60,
                "AlarmActions": [
                    {
                        "Ref": "FirefoxServiceScaleOutPolicy"
                    },
                    {
                        "Ref": "ChromeServiceScaleOutPolicy"
                    }
                ],
                "Namespace": "AWS/ECS",
                "Dimensions": [
                    {
                        "Name": "ClusterName",
                        "Value": {
                            "Ref": "SeleniumGrid"
                        }
                    },
                    {
                        "Name": "ServiceName",
                        "Value": {
                            "Fn::GetAtt": [
                                "ServiceNodeFirefox",
                                "Name"
                            ]
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "MetricName": "CPUUtilization"
            }
        },
        "NodeServiceMemoryScaleOutAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "SELENIUM_FARGATE_NODE_MEMORY_80PCT_1MIN_DEV",
                "EvaluationPeriods": "1",
                "Statistic": "Maximum",
                "TreatMissingData": "missing",
                "Threshold": "80",
                "AlarmDescription": "Alarm to add capacity if MEMORY is high",
                "Period": 60,
                "AlarmActions": [
                    {
                        "Ref": "FirefoxServiceScaleOutPolicy"
                    },
                    {
                        "Ref": "ChromeServiceScaleOutPolicy"
                    }
                ],
                "Namespace": "AWS/ECS",
                "Dimensions": [
                    {
                        "Name": "ClusterName",
                        "Value": {
                            "Ref": "SeleniumGrid"
                        }
                    },
                    {
                        "Name": "ServiceName",
                        "Value": {
                            "Fn::GetAtt": [
                                "ServiceNodeFirefox",
                                "Name"
                            ]
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "MetricName": "MemoryUtilization"
            }
        }
    },
    "Outputs": {
        "ExternalUrl": {
            "Description": "The url of the external load balancer",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "SeleniumLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "ExternalUrl"
                        ]
                    ]
                }
            }
        }
    }
}
